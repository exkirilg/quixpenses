// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quixpenses.DatabaseAccess;

#nullable disable

namespace Quixpenses.DatabaseAccess.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20231219063923_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quixpenses.Common.Models.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("FractionDigits")
                        .HasColumnType("integer")
                        .HasColumnName("fraction_digits");

                    b.HasKey("Id");

                    b.ToTable("currencies");

                    b.HasData(
                        new
                        {
                            Id = "USD",
                            FractionDigits = 2
                        },
                        new
                        {
                            Id = "EUR",
                            FractionDigits = 2
                        });
                });

            modelBuilder.Entity("Quixpenses.Common.Models.Invite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Available")
                        .HasColumnType("integer")
                        .HasColumnName("available");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<int>("Used")
                        .HasColumnType("integer")
                        .HasColumnName("used");

                    b.HasKey("Id");

                    b.ToTable("invites");
                });

            modelBuilder.Entity("Quixpenses.Common.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Sum")
                        .HasColumnType("integer")
                        .HasColumnName("sum");

                    b.Property<string>("currency_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("currency_id");

                    b.HasIndex("user_id");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Quixpenses.Common.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("boolean")
                        .HasColumnName("is_authorized");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Quixpenses.Common.Models.UserSettings", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("currency_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("currency_id");

                    b.ToTable("users_settings");
                });

            modelBuilder.Entity("Quixpenses.Common.Models.Transaction", b =>
                {
                    b.HasOne("Quixpenses.Common.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("currency_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Quixpenses.Common.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quixpenses.Common.Models.UserSettings", b =>
                {
                    b.HasOne("Quixpenses.Common.Models.User", null)
                        .WithOne("Settings")
                        .HasForeignKey("Quixpenses.Common.Models.UserSettings", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quixpenses.Common.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("currency_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Quixpenses.Common.Models.User", b =>
                {
                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
